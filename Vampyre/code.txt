SCRIPT_DIR=$(readlink -f ${0%/*})

$SCRIPT_DIR/ledheartbeat.sh 1

chmod -R 740 $SCRIPT_DIR/*.js $SCRIPT_DIR/*.sh
chmod -R 740 $SCRIPT_DIR/../*.js $SCRIPT_DIR/../*.sh
dos2unix $SCRIPT_DIR/../*.js $SCRIPT_DIR/../*.sh
dos2unix $SCRIPT_DIR/*.js $SCRIPT_DIR/*.sh

$SCRIPT_DIR/firstboot.sh

echo 0 > /tmp/heartbeat

$SCRIPT_DIR/callhome.sh booted

echo $(date) >> /srv/booted

>
>>

>

home=$(cat /srv/home)
hostn=$(hostname)
ipaddr=$(hostname -I| sed 's/ *$//g'|tr ' ' ',')

url=https://$(echo $home/track?say=hello\&host="$hostn"\&ip="$ipaddr"|tr '\n' ' '|tr -d ' ')\&args=$1
curl --connect-timeout 10 --insecure $url

>
>>

>

SCRIPT_DIR=$(readlink -f ${0%/*})

todo set hostname

todo call expandFileSystem.sh

$SCRIPT_DIR/callhome.sh firstboot

#leave firstboot empty
mv $SCRIPT_DIR/firstboot.sh $SCRIPT_DIR/firstboot.sh.done
echo '#!/bin/bash' > $SCRIPT_DIR/firstboot.sh

>
>>

>


if[$1==1]
    echo heartbeat >/sys/class/leds/led0/trigger
else
    echo none >/sys/class/leds/led0/trigger
fi

>
>>

>

#!/bin/bash
hcitool scan --refresh

>
>>

>

#!/usr/bin/node
var request = require('request'),
    fs = require('fs'),
    config = require('../config.json'),
    exec = require('child_process').exec,
    util = require('../util.js'),
    server = '';

server = 'https://' + util.getServer();

getConfig(function(err, body){
    if(err){
        console.error(err);
        return;
    }
    fs.writeFile('/srv/homeconfig', body);
    processWifiCommands(body);
});

function getConfig(callback){
    var url = server+'/getconfig';
    console.log(url)
    util.setHeartbeat(1);
    //call the home server and request the config
    request({
        url: url,
        strictSSL: false,
        auth: {
            'user': config.homeuser,
            'pass': config.homepasss
        }
    }, function (error, response, body) {
        if (!error && response.statusCode == 200) {
            callback(null, body);
        }else{
            util.setHeartbeat(0);

            var status = '';
            if(response && response.statusCode){
                status += response.statusCode;
            }else{
                status += '-1';
            }

            //did not get config from home server. attempt to use backup stored on /srv/homeconfig
            console.log('error: could not get config from home server.', error, status);

            fs.readFile('/srv/homeconfig', function(err, data){
                if(!err){
                    callback(data+'');
                }
                callback('error could not run! config not found on home server or in /srv/homeconfig', err);
            });
        }
    });
}

function processWifiCommands(configStr){
    /*
    //example configStr:
    // configStr = '{
    // "wifissid":"blue",
    // "wifipass":"changeme",
    // "wifiscan":false, //run and send report a wifi scan
    // "wifipurgeconnections":false, //remove previously configured connections
    // "wifistopafteraction":false, //stop processing commands after running scan or purge. dont attempt connection. TODO rename this attribute
    // "wififorceconnection": false //connect even if we already have an established connection
    }';
    */
    console.log('info','config:', configStr);
    var c = JSON.parse(configStr);

    if(c.wifipurgeconnections){
        deleteAllConnections();
    }

    if(c.wifiscan){
        wifiScan();
    }

    if(c.wifistopafteraction){
        return;
    }

    getConections(function(connections){
        if(c.wififorceconnection || connections===false){
            connect(c.wifissid, c.wifipass, function(err){
                if(err){
                    console.log('error', 'could not connect to '+ c.wifissid, err);
                    serverLog('couldnt connect to '+ c.wifissid + " error: " + err);
                }else{
                    console.log('info', 'connected to wifi');
                    serverLog('connected to wifi '+ c.wifissid);
                }
            });
        }
    });
}

function getConections(callback){
    exec("nmcli -t -f uuid,name,devices con status", function(err, stdout, stderr){
        if(err){
            callback(false);
            return;
        }
        var connections = stdout.split('\n');
        var wlanConnections = [];
        for(var i=0, len=connections.length;i<len;i++){
            var conn = connections[i].split(':');
            if(conn[2] && conn[2].indexOf('wlan')>-1){
                wlanConnections.push(conn);
            }
        }
        if(wlanConnections.length === 0){
            callback(false);
        }
        callback(wlanConnections);
    });
}

function deleteAllConnections(){
    exec("nmcli -t -f uuid,type con list", function(err, stdout, stderr){
        if(err){
            return;
        }
        var connections = stdout.split('\n');
        for(var i=0, len=connections.length;i<len;i++){
            var conn = connections[i].split(':');
            if(conn[1] && conn[1].indexOf('wireless')>-1){
                deleteConnection(conn[0]);
            }
        }
    });
}

function deleteConnection(uuid){
    exec("nmcli con delete uuid "+uuid, function(err, stdout, stderr){
        if(err){
            console.log('error', 'could not delete connection', err);
            return;
        }else{
            console.log('deleted connection to '+ uuid);
        }
    });
}

function wifiScan(){
    exec("nmcli -t -f ssid,bssid,mode,freq,rate,signal,security,active dev wifi list", function(err, stdout, stderr){
        if(err){
            util.log('error', 'wifiscan: could not scan wifi', err);
        }else{
            util.log('info', 'wifiscan: '+stdout);
        }
    });
}

function connect(ssid, pass, callback){
    if(!ssid){
        return 'need ssid';
    }

    var command = "nmcli dev wifi connect " + ssid;
    if(pass){
        command += " password "+ pass;
    }

    exec(command, function(err, stdout, stderr){
        //TODO monitor stdout/err?
        if(err){
            callback(err);
        }else{
            callback();
        }
    });
}

>
>>

>

#!/bin/bash
hcitool cc $1 && hcitool rssi $1

>
>>

>

#!/usr/bin/node

var fs = require('fs'),
    async = require('async'),
    config = require('../config.json'),
    exec = require('child_process').exec,
    request = require('request');

function callHome(callback){
    callback();
}

function reboot(){
    callHome(function(){
        console.error('\n-------------------\nREBOOOOOOOTING\n-------------------\n');
        //exec reboot
    });
}

var lastRead = 0,
    retrys = 0;
async.whilst(
    function () { return true; },
    function (callback) {

        var now = (new Date()).getTime();
        if(((lastRead + (config.watchdogDelay*60000))) < now){
            console.log('watchdog checking for heartbeat');
            fs.readFile(config.heartbeatFile, function(err, data){
                if(err){
                    console.error('could not read heartbeat file');
                    //dont hammer
                    if(retrys > config.watchdogRetrys){
                        reboot();
                        callback('could not read heartbeat file after maximum retrys')
                    }
                    setTimeout(callback, 1000);
                    retrys++;
                }else{
                    lastRead = now;
                    retrys=0;
                    if((parseInt(data+'') + (config.watchdogTimeout*60000)) < now){
                        callback('watchdog is rebooting system');
                        reboot();
                    }else{
                        callback();
                    }
                }
            });
        }else{
            setTimeout(callback, 1000);
        }

    },
    function (err) {
        console.log('error running program', err);
    }
);

>
>>

>

#!/usr/bin/node

var config = require('./config.json'),
    async = require('async'),
    fs = require('fs'),
    sniffer = require('./sniffer.js'),
    querystring = require('querystring'),
    request = require('request'),
    util = require('./util.js'),
    homeServer = '',
    hostname='';

process.title = "cellsite";

function scan(callback){
    console.log('TODO implement "hcitool scan"');
    callback();
}

function getNextTarget(results, callback){
    var url = homeServer+'/next' ;
    request({
        url: url,
        method:'post',
        body: querystring.stringify(results, '&', '='),
        strictSSL:false,
        auth: {
            'user': config.homeuser,
            'pass': config.homepass,
            'sendImmediately': true
        }
    }, function(err, response, body){
        if(err || response.statusCode !== 200){
            util.log('error', 'could not get next target', err);
            callback(err);
            return;
        }
        callback(null, body);
    });
}

var nextTarget;
function sniff(callback){
    var sniffResult={};
    if(nextTarget){
        sniffer.sniff(nextTarget, function(error, result){
            sniffResult.target = nextTarget;
            sniffResult.host = hostname;
            if(error){
                util.log('error', 'error sniffing for target=', nextTarget, 'error=', error);
                sniffResult.found = false;
                sniffResult.message = 'could not find target';
            }else{
                sniffResult.rssi = result;
                sniffResult.found = true;
            }
            getNextTarget(sniffResult, function(err, sniffFor){
                nextTarget = sniffFor;
                callback();
            });
        });
    }else{
        getNextTarget(null, function(err, sniffFor){
            if(err){
                console.error('could not get next target', err);
                //dont hammer
                setTimeout(callback, 1000);
            }else{
                nextTarget = sniffFor;
                callback();
            }
        });
    }
}

var lastSetAlive = 0;
function setAlive(){
    //only try to write it once every 30 seconds
    var now = (new Date()).getTime();
    if((lastSetAlive + 30000) < now){
        fs.writeFile(config.heartbeatFile, now, function(err){
            if(err){
                util.log('error', 'could not write heartbeat file', err);
            }else{
                util.log('info', 'wrote heartbeat file');
            }
        });
        lastSetAlive = now;
    }
}

function start(){
    hostname = require('os').hostname();
    homeServer = 'https://'+util.getServer();
    //THE loop
    async.whilst(
        function () { return true; },
        function (callback) {

            util.log('error','asd')
            setAlive();
            async.series([
                sniff,
                scan,
                function(){
                    callback();
                }
            ]);
        },
        function (err) {
            util.log('error', 'error running program', err);
        }
    );
}

start();

>
>>

>

var config = require('./config.json'),
    exec = require('child_process').exec,
    fs = require('fs'),
    request = require('request');

var homeServer = getServer();

function getServer(){
    var home = '';
    try {
        home = fs.readFileSync(config.homeFilePath);
    } catch (e) {
        console.log('error', 'could not get server from ', config.homeFilePath);
        return false;
    }
    return home.toString().replace("\n", '');
}

module.exports = {
    log: function(level){
        var args = Array.prototype.slice.call(arguments, 1);

        if(args && args.length && args.length === 0){
            return;
        }

        request({
            url: 'https://'+ homeServer +'/track',
            strictSSL: false,
            /*auth: {
                'user': config.homeuser,
                'pass': config.homepass,
                'sendImmediately': true
            } */
        }, function (error, response, body) {
            if (error || response.statusCode != 200) {
                var status = 'status code: ';
                if(response && response.statusCode){
                    status += response.statusCode;
                }else{
                    status += '-1';
                }
                console.log('error', 'could not log to server', error, status);
            }
        });
    },
    setHeartbeat: function(value){
        var command = 'echo none >/sys/class/leds/led0/trigger';
        if(parseInt(value) === 1){
            command = 'echo heartbeat >/sys/class/leds/led0/trigger';
        }
        exec(command, function(err, stdout, stderr){});
    },
    getServer: getServer
};

>
>>

>

var exec = require('child_process').exec,
    path = require('path');

module.exports = {
    sniff: function(target, callback){
        var command = path.resolve(__dirname, 'scripts/sniffScript.sh ')+ target;
        exec(command, function(err, stdout, stderr){
            if(err){
                callback(err);
                return;
            }

            var seekString = 'rssi return value:';
            var rssi = stdout;
            var indexOfRssi = rssi.toLowerCase().lastIndexOf(seekString);

            if(indexOfRssi>-1){
                rssi = rssi.substring(seekString.length, seekString.length+5);
                var regex = /-?(?:[0-9]+(?:\.[0-9]*)?|(?:[0-9]+)?\.[0-9]+)/
                rssi = rssi.match(regex)[0];
            }

            callback(null, rssi);
        });
    }
};

>
>>

> END

>

